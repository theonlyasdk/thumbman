<!doctype html>
<html lang="en" data-bs-theme="dark">

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <title>Thumbman</title>

    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link
        href="https://fonts.googleapis.com/css2?family=Oswald:wght@200..700&family=Roboto:ital,wght@0,100..900;1,100..900&display=swap"
        rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-icons/1.11.1/font/bootstrap-icons.min.css"
        rel="stylesheet">
    <link rel="stylesheet" href="style.css">
</head>

<body>
    <main class="container h-100 py-4 d-flex align-items-center justify-content-center flex-column">
        <div class="text-center mb-4 d-flex flex-row justify-content-center align-items-center gap-3">
            <h1 class="thumbman-title m-0 p-0">Thumbman</h1>
            <div class="d-flex flex-column gap-2 m-0 p-0">
                <a href="http://github.com/theonlyasdk/thumbman" class="btn btn-bg-transp m-0"><i
                        class="bi bi-github" title="GitHub Repository"></i></a>
                <a href="http://github.com/theonlyasdk/thumbman/issues" class="btn btn-bg-transp m-0"><i
                        class="bi bi-bug-fill" title="Report issues on GitHub"></i></a>
            </div>
        </div>

        <div class="mb-3 d-flex flex-row justify-content-center align-items-center gap-2 w-100">
            <input id="urlInput" class="input-text" placeholder="e.g. https://youtu.be/dQw4w9WgXcQ or dQw4w9WgXcQ"
                aria-label="YouTube URL" title="Paste YouTube URL or video ID here" autocomplete="off">
            <button id="grabBtn" class="button" type="button" title="Get thumbnails">Get</button>
        </div>
        <div id="alertArea"></div>
        <div id="results" class="row g-3"></div>
        <div class="mt-4 small-muted mb-3" id="hint">Paste a YouTube URL or video ID in the input box to get its
            thumbnail.</div>
    </main>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>

    <script>
        function extractVideoID(urlOrId) {
            const s = urlOrId.trim();
            if (/^[a-zA-Z0-9_-]{11}$/.test(s)) return s;
            const patterns = [
                /(?:youtube\.com\/(?:watch\?.*v=|embed\/|v\/))([a-zA-Z0-9_-]{11})/,
                /(?:youtu\.be\/)([a-zA-Z0-9_-]{11})/,
                /[?&]v=([a-zA-Z0-9_-]{11})/
            ];
            for (const p of patterns) {
                const m = s.match(p);
                if (m && m[1]) return m[1];
            }
            return null;
        }

        function buildThumbUrl(id) {
            const base = `https://img.youtube.com/vi/${id}`;
            return [
                { key: 'maxresdefault.jpg', label: 'Max Resolution', dims: '1280×720', url: `${base}/maxresdefault.jpg` },
                { key: 'sddefault.jpg', label: 'Standard Quality (SQ)', dims: '640×480', url: `${base}/sddefault.jpg` },
                { key: 'hqdefault.jpg', label: 'High Quality (HQ)', dims: '480×360', url: `${base}/hqdefault.jpg` },
                { key: 'mqdefault.jpg', label: 'Medium Quality (MQ)', dims: '320×180', url: `${base}/mqdefault.jpg` },
                { key: 'default.jpg', label: 'Default (120×90)', dims: '120×90', url: `${base}/default.jpg` },
                { key: '0.jpg', label: 'Frame 0', dims: 'Variable', url: `${base}/0.jpg` },
                { key: '1.jpg', label: 'Frame 1', dims: 'Variable', url: `${base}/1.jpg` },
                { key: '2.jpg', label: 'Frame 2', dims: 'Variable', url: `${base}/2.jpg` },
                { key: '3.jpg', label: 'Frame 3', dims: 'Variable', url: `${base}/3.jpg` }
            ];
        }

        function showAlert(type, text) {
            const alertArea = document.getElementById('alertArea');
            const html = `<div class="alert alert-${type} alert-dismissible mb-0 w-100" role="alert">${text}<button type="button" class="btn-close" data-bs-dismiss="alert"></button></div>`;
            alertArea.innerHTML = html;
        }

        function createCard(item) {
            const col = document.createElement('div');
            col.classList.add('col-12', 'col-sm-6', 'col-md-4', 'col-lg-3');

            const card = document.createElement('div');
            card.classList.add('card', 'h-100');

            const imgWrap = document.createElement('div');
            imgWrap.classList.add('ratio', 'ratio-16x9');

            const img = document.createElement('img');
            img.classList.add('thumb-img');
            img.setAttribute('alt', item.label);
            img.setAttribute('src', item.url);

            imgWrap.appendChild(img);

            const body = document.createElement('div');
            body.classList.add('card-body', 'p-2');
            body.innerHTML = `<h6 class="card-title mb-1">${item.label}</h6><div class="small-muted">${item.key} • ${item.dims}</div>`;

            const footer = document.createElement('div');
            footer.classList.add('card-footer', 'bg-transparent', 'border-0', 'p-2', 'd-flex', 'gap-2');

            const dl = document.createElement('button');
            dl.title = 'Download this thumbnail';
            dl.classList.add('button', 'button-sm', 'flex-grow-1');
            dl.innerHTML = '<i class="bi bi-download me-1"></i> Download';

            const open = document.createElement('a');
            open.title = 'Open this thumbnail in a new tab';
            open.classList.add('button', 'button-sm', 'flex-grow-1', 'text-center', 'text-decoration-none');
            open.setAttribute('href', item.url);
            open.setAttribute('target', '_blank');
            open.setAttribute('rel', 'noopener');
            open.innerHTML = '<i class="bi bi-box-arrow-up-right me-1"></i> Open';

            footer.appendChild(dl);
            footer.appendChild(open);

            card.appendChild(imgWrap);
            card.appendChild(body);
            card.appendChild(footer);
            col.appendChild(card);

            img.addEventListener('error', function () {
                card.classList.add('unavailable');
                this.setAttribute('src', 'data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="640" height="360"><rect width="100%" height="100%" fill="%23212529"/><text x="50%" y="50%" dominant-baseline="middle" text-anchor="middle" fill="%23adb5bd" font-family="Roboto,Arial" font-size="18">Unavailable</text></svg>');
                dl.disabled = true;
                dl.classList.remove('btn-primary');
                dl.textContent = 'Unavailable';
                open.setAttribute('href', '#');
                open.classList.add('disabled');
                open.textContent = 'Unavailable';
            });

            dl.addEventListener('click', () => {
                fetch(item.url)
                    .then(response => response.blob())
                    .then(blob => {
                        const url = URL.createObjectURL(blob);
                        const tempLink = document.createElement('a');
                        tempLink.style.display = 'none';
                        tempLink.href = url;
                        tempLink.download = item.key;
                        document.body.appendChild(tempLink);
                        tempLink.click();
                        document.body.removeChild(tempLink);
                        URL.revokeObjectURL(url);
                    })
                    .catch(error => {
                        console.error('Download failed:', error);
                        showAlert('danger', 'Failed to download the thumbnail. It may be unavailable.');
                    });
            });

            return col;
        }

        document.addEventListener('DOMContentLoaded', function () {
            const grabBtn = document.getElementById('grabBtn');
            const urlInput = document.getElementById('urlInput');
            const results = document.getElementById('results');
            const alertArea = document.getElementById('alertArea');

            urlInput.focus();

            function doGrabVideoURL() {
                results.innerHTML = '';
                alertArea.innerHTML = '';
                const input = urlInput.value.trim();
                if (!input) {
                    showAlert('warning', 'Please enter a valid YouTube URL or ID.');
                    return;
                }
                const id = extractVideoID(input);
                if (!id) {
                    showAlert('danger', 'Hmm, that does not seem like a valid YouTUbe video link. Paste a full URL or the 11-character ID.');
                    return;
                }

                results.style.display = 'flex';

                const list = buildThumbUrl(id);
                for (const item of list) {
                    results.appendChild(createCard(item));
                }

                document.getElementById('hint').style.display = 'none';
            }

            grabBtn.addEventListener('click', doGrabVideoURL);
            urlInput.addEventListener('keypress', function (e) {
                if (e.key === 'Enter') doGrabVideoURL();
            });
        });
    </script>
</body>

</html>